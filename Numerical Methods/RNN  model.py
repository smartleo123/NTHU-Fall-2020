# -*- coding: utf-8 -*-
"""數值方法 作業2. RNN模型實作.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M6AL0VuYrrhrYEhheeuc56nH_gCCzX8U
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import tensorflow as tf
import keras
from tensorflow.keras.preprocessing import sequence
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, Bidirectional
from tensorflow.keras import regularizers
from tensorflow.keras.layers import LSTM
from tensorflow.keras.datasets import imdb

(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=10000)

len(x_train)

len(x_test)

x_train = sequence.pad_sequences(x_train, maxlen=100)
x_test = sequence.pad_sequences(x_test, maxlen=100)

model = Sequential()

model.add(Embedding(10000, 128))
model.add(Bidirectional(LSTM(32, dropout=0.2, recurrent_dropout=0.2)))
model.add(Dense(1, activation='relu'))

model.summary()

model.compile(loss='binary_crossentropy',
             optimizer='adam',
             metrics=['accuracy'])

model.fit(x_train, y_train, batch_size=64, epochs=16 , validation_split=0.2)

score = model.evaluate(x_test,y_test)
loss, acc = score
print('資料正確率為:', acc)

model2 = Sequential()

model2.add(Embedding(10000, 128))
model2.add(Bidirectional(LSTM(16, dropout=0.5, recurrent_dropout=0.5)))
model2.add(Dense(1, activation='relu'))

model2.summary()

model2.compile(loss='binary_crossentropy',
             optimizer='adam',
             metrics=['accuracy'])

model2.fit(x_train, y_train, batch_size=64, epochs=16 , validation_split=0.2)

score = model2.evaluate(x_test,y_test)
loss, acc = score
print('資料正確率為:', acc)

model3 = Sequential()

model3.add(Embedding(10000, 128))
model3.add(Bidirectional(LSTM(16, kernel_regularizer = regularizers.l2(0.01), 
                  recurrent_regularizer = regularizers.l2(0.01),
                  bias_regularizer = regularizers.l2(0.01))))
model3.add(Dense(1, activation='relu'))

model3.compile(loss='binary_crossentropy',
             optimizer='adam',
             metrics=['accuracy'])

model3.fit(x_train, y_train, batch_size=64, epochs=16 , validation_split=0.2)

score = model2.evaluate(x_test,y_test)
loss, acc = score
print('資料正確率為:', acc)